{"version":3,"sources":["components/App.js","index.js"],"names":["PlayController","play","iconName","pause","start","App","state","condition","onInputChange","event","_this","typed","toggle","setState","console","log","options","strings","this","props","typeSpeed","backSpeed","loop","shuffle","Typed","el","destroy","_this2","react_default","a","createElement","className","style","whiteSpace","ref","border","concat","onClick","reset","React","Component","ReactDOM","render","src_components_App","document","querySelector"],"mappings":"oNAGMA,EAAiB,CACtBC,KAAM,CACLC,SAAU,QAEXC,MAAO,CACND,SAAU,UAQRE,GAAQ,EAuEGC,6MArEdC,MAAQ,CAAEC,UAAWH,KAGrBI,cAAgB,SAAAC,GAEdL,GADa,IAAVA,EAMJM,EAAKC,MAAMC,SACXF,EAAKG,SAAS,CAAEN,UAAWH,IAC3BU,QAAQC,IAAIL,EAAKJ,MAAMC,+FAIJ,IAKbS,EAAU,CACfC,QAHmBC,KAAKC,MAAjBF,QAIPG,UAAW,IACXC,UAAW,GACXC,MAAM,EACNC,SAAS,GAGVL,KAAKP,MAAQ,IAAIa,IAAMN,KAAKO,GAAIT,kDAOhCE,KAAKP,MAAMe,2CAGH,IAAAC,EAAAT,KAEFjB,GA9Cc,IA8CMiB,KAAKZ,MAAMC,UA9CV,OAAS,QA+C5BL,EAAaF,EAAeC,GAA5BC,SACR,OACC0B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,UAEDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,QACCE,MAAO,CAAEC,WAAY,OACrBC,IAAK,SAAAT,GACJE,EAAKF,GAAKA,MAIbG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,MAAO,CAAEG,OAAQ,cAE5CP,EAAAC,EAAAC,cAAA,WAlBY,YAoBZF,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAK,OAAKlC,EAAL,kCAA+CmC,QAASnB,KAAKV,gBACzEoB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,+CAA+CM,QAAS,kBAAMV,EAAKhB,MAAM2B,WACtFV,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sCAAsCM,QAAS,kBAAMV,EAAKhB,MAAMe,sBA/DhEa,IAAMC,WCbxBC,IAASC,OACRd,EAAAC,EAAAC,cAACa,EAAD,CACC1B,QAAS,CACR,iBACA,qDACA,uDACA,yCACA,kCACA,mBACA,0CAGF2B,SAASC,cAAc","file":"static/js/main.11868a1a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Typed from 'typed.js';\nconst PlayController = {\n\tplay: {\n\t\ticonName: 'play',\n\t},\n\tpause: {\n\t\ticonName: 'pause',\n\t},\n};\n\nconst getCondition = condition => {\n\treturn condition === true ? 'play' : 'pause';\n};\n\nvar start = false;\nclass App extends React.Component {\n\tstate = { condition: start };\n\n\t//switch the bool val\n\tonInputChange = event => {\n\t\tif (start === true) {\n\t\t\tstart = false;\n\t\t} else {\n\t\t\tstart = true;\n\t\t}\n\n\t\tthis.typed.toggle();\n\t\tthis.setState({ condition: start });\n\t\tconsole.log(this.state.condition);\n\t};\n\n\t//Did rendered\n\tcomponentDidMount() {\n\t\t// If you want to pass more options as props, simply add\n\t\t// your desired props to this destructuring assignment.\n\t\tconst { strings } = this.props;\n\t\t// You can pass other options here, such as typing speed, back speed, etc.\n\t\tconst options = {\n\t\t\tstrings: strings,\n\t\t\ttypeSpeed: 100,\n\t\t\tbackSpeed: 50,\n\t\t\tloop: true,\n\t\t\tshuffle: false,\n\t\t};\n\t\t// this.el refers to the <span> in the render() method\n\t\tthis.typed = new Typed(this.el, options);\n\t}\n\n\t//Did update and rendered\n\tcomponentWillUnmount() {\n\t\t// Make sure to destroy Typed instance on unmounting\n\t\t// to prevent memory leaks\n\t\tthis.typed.destroy();\n\t}\n\n\trender() {\n\t\tvar playText = 'Control: ';\n\t\tconst play = getCondition(this.state.condition);\n\t\tconst { iconName } = PlayController[play];\n\t\treturn (\n\t\t\t<div className=\"wrap ui container\">\n\t\t\t\t<div className=\"titleDiv\">\n\t\t\t\t\t<h1 className=\"titleName\">HENRY</h1>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"type-wrap\">\n\t\t\t\t\t<span\n\t\t\t\t\t\tstyle={{ whiteSpace: 'pre' }}\n\t\t\t\t\t\tref={el => {\n\t\t\t\t\t\t\tthis.el = el;\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"buttonsDiv\" style={{ border: '1px solid' }}>\n\t\t\t\t\t{/*get iconname at real time */}\n\t\t\t\t\t<br />\n\t\t\t\t\t{playText}\n\t\t\t\t\t<i className={`${iconName} icon buttonHover buttonHover1`} onClick={this.onInputChange} />\n\t\t\t\t\t<i className=\"redo alternate icon buttonHover buttonHover2\" onClick={() => this.typed.reset()} />\n\t\t\t\t\t<i className=\"trash icon buttonHover buttonHover3\" onClick={() => this.typed.destroy()} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n\t<App\n\t\tstrings={[\n\t\t\t\"Hi, I'm Henry.\",\n\t\t\t'I am a <strong><i>Software Developer.</i></strong>',\n\t\t\t'I graduated from <strong>Purdue University.</strong>',\n\t\t\t'I do <strong>Web Development.</strong>',\n\t\t\t'I do other exciting stuffs too!',\n\t\t\t'I am trilingual.',\n\t\t\t'I am a <strong>team player.</strong>',\n\t\t]}\n\t/>,\n\tdocument.querySelector('#root'),\n);\n"],"sourceRoot":""}